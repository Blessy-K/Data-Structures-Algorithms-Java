THIS IS THE BETTER SOLUTION
TC : O(N^2)


class Solution {
    public int subarraySum(int[] nums, int k) {
     int count = 0;
     int n = nums.length;
     for(int i=0;i<=n;i++)
     {
        int sum =0;
        for(int j=i;j<n;j++)
        {
            sum = sum+nums[j];
            if(sum==k)
            {
                count++;
            }
        }
     }   
     return count;
    }
}

THIS IS THE  BETTER SOLUTION 
TC : O(N)
SC : O(N)

class Solution {
    public int subarraySum(int[] nums, int k) {
     Map<Integer, Integer> map = new HashMap<>();
     map.put(0, 1);
     int n =nums.length;
     int count = 0;
     int psum = 0;
     for(int i=0;i<n;i++)
     {
        psum = psum+nums[i];
        if(map.containsKey(psum-k))
        {
            count = count+map.get(psum-k);
        }
        if(map.containsKey(psum))
        {
            map.put(psum,map.get(psum)+1);
        }
        else
        {
            map.put(psum,1);
        }
     }
     return count;
    }
}
