THIS IS THE BRUTE FORCE SOLUTION
TC : O(N^2)


class Solution {
    public int longestConsecutive(int[] nums) {
     int n=nums.length;
     if(n==0)
     {
        return 0;
     }   
     int longest =0;
     for(int i=0;i<n;i++)
     {
        int num = nums[i];
        int count =1;
        boolean find = true;
        while(find)
        {
            find = false;
        for(int j=0;j<n;j++)
        {
            if(nums[j]==num+1)
            {
                num++;
                count++;
                find = true;
                break;
            }
        }
     }
     longest = Math.max(longest,count);
    }
    return longest;
}
}


THIS IS THE BRUTE FORCE SOLUTION
TC : O(N logN)


class Solution {
    public int longestConsecutive(int[] nums) {
     int n=nums.length;
     Arrays.sort(nums);
     int longest = 1;
     int num = 1;
     for(int i=1;i<n;i++)
     {
        if(nums[i]==nums[i-1])
        {
            continue;
        }
        else if(nums[i]==nums[i-1]+1)
        {
            num++;
        }
        else
        {
            num = 1;
        }
        longest=Math.max(longest,num);
     }
     return longest;
}
}


THIS IS THE BRUTE FORCE SOLUTION
TC : O(N)


class Solution {
    public int longestConsecutive(int[] nums) {
    int n= nums.length;
    if(n==0)
    {
        return 0;
    }
    HashSet<Integer> set = new HashSet<>();
    for(int i=0;i<n;i++)
    {
        set.add(nums[i]);
    }
    ArrayList<Integer> list = new ArrayList<>(set);
    int longest = 0;
    for(int i=0;i<list.size();i++)
    {
       int num = list.get(i);
       if(!set.contains(num-1))
       {
        int current = num;
        int streak = 1;
        while(set.contains(current+1))
        {
            current++;
            streak++;
        }
        if(streak>longest)
        {
            longest=streak;
        }
       }
    }
    return longest;
}
}
