THIS IS THE BRUTE FORCE SOLUTION
TC : O(N^2)
SC : O(N)


class Solution {
    public List<Integer> leaders(int arr[]) {
        // code here
        int n = arr.length;
        List<Integer> leaders = new ArrayList<>();
        for (int i=0;i<n;i++)
        {
            boolean lead = true;
            for(int j=i+1;j<n;j++)
            {
                if(arr[j]>arr[i])
                {
                    lead = false;
                    break;
                }
            }
            if(lead)
            {
                leaders.add(arr[i]);
            }
        }
        return leaders;
    }
}


THIS IS THE OPTIMAL SOLUTION
TC : O(N)


class Solution {
    static ArrayList<Integer> leaders(int arr[]) {
        // code here
        int n = arr.length;
        ArrayList<Integer> leaders = new ArrayList<>();
        int max = arr[n-1];
        leaders.add(max);
        for(int i=n-2;i>=0;i--)
        {
            if(arr[i]>=max)
            {
                max = arr[i];
                leaders.add(arr[i]);
            }
        }
        Collections.reverse(leaders);
        return leaders;
    }
}
