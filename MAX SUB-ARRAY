(THIS IS THE BRUTE FORCE SOLUTION 
TC : O(N^3)
SC : O(1) )


class Solution {
    public int maxSubArray(int[] nums) {
      int max = Integer.MIN_VALUE;
      for(int i=0;i<nums.length;i++)
      {
        for(int j=i;j<nums.length;j++)
        {
            int sum =0;
            for(int k=i;k<=j;k++)
            {
                sum = sum+nums[k];
            }
            max = Math.max(max,sum);
        }
      }  
      return max;
    }
}


(THIS IS THE BETTER SOLUTION 
TC : O(N^2)
SC : O(1) )


class Solution {
    public int maxSubArray(int[] nums) {
      int max = Integer.MIN_VALUE;
      for(int i=0;i<nums.length;i++)
      {
        int sum =0;
        for(int j=i;j<nums.length;j++)
        {
            sum = sum+nums[j];
            max = Math.max(max,sum);
        }
        }
      return max;
    }
}


(THIS IS THE OPTIMAL SOLUTION 
TC : O(N)
SC : O(1))

class Solution {
    public int maxSubArray(int[] nums) {
      int max = nums[0];
      int sum = nums[0];
      for(int i=1;i<nums.length;i++)
      {
        sum = Math.max(nums[i],sum+nums[i]);
        if(sum>max)
        {
            max = sum;
        }
      }
      return max;
    }
}
